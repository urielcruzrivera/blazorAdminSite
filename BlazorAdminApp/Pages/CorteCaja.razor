@page "/cortecaja"

@using BlazorAdminApp.Services
@using BlazorAdminApp.Models
@using System.Globalization
@inject IBitacoraService bitacoraService
@inject IUsuarioService usuarioService
@inject ICajaService cajaService

<PageTitle>Corte Caja</PageTitle>

<RadzenText TextStyle="TextStyle.H5">Corte de Caja</RadzenText>

<RadzenAlert AlertStyle="AlertStyle.Warning" Variant="Variant.Flat" Shade="Shade.Lighter" @ref="alert" @bind-Visible="isAlertVisible">
    La fecha Inicio debe ser menor a la fecha Fin
</RadzenAlert>

<RadzenRow AlignItems="AlignItems.End" Wrap="FlexWrap.Wrap" Gap="1rem" Class="rz-p-sm-3">
    <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
        <RadzenStack>
            <RadzenStack>
                <RadzenLabel Text="Fecha Inicio:" Component="dtpFechaInicio" Style="margin-right: 8px; vertical-align: middle;" />
                <RadzenDatePicker @bind-Value=@startDate ShowTime="true" ShowSeconds="false" HoursStep="1" MinutesStep="5" DateFormat="dd/MM/yyyy HH:mm"
                                  Name="dtpFechaInicio" DateRender=@DateRender CurrentDateChanged=@OnCurrentStartDateChanged />
            </RadzenStack>
        </RadzenStack>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
        <RadzenStack>
            <RadzenStack>
                <RadzenLabel Text="Fecha Fin:" Component="dtpFechaFin" Style="margin-right: 8px; vertical-align: middle;" />
                <RadzenDatePicker @bind-Value=@endDate ShowTime="true" ShowSeconds="false" HoursStep="1" MinutesStep="5" DateFormat="dd/MM/yyyy HH:mm"
                                  Name="dtpFechaFin" DateRender=@DateRender CurrentDateChanged=@OnCurrentEndDateChanged Min="@minEndDate" />
            </RadzenStack>
        </RadzenStack>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
        <RadzenStack>
            <RadzenStack>
                <RadzenLabel Text="Caja (Computadora):" Component="DropDownTextValueProperties" Style="margin-right: 8px; vertical-align: middle;" />
                <RadzenDropDown @bind-Value=@cajaSeleccionada Data=@cajas TextProperty="@nameof(CajaResponse.CajaNombre)" ValueProperty="@nameof(CajaResponse.CajaID)" Style="width: 100%;" Name="DropDownTextValueProperties" />
            </RadzenStack>
        </RadzenStack>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
        <RadzenStack>
            <RadzenStack>
                <RadzenLabel Text="Usuario:" Component="DropDownTextValueProperties" Style="margin-right: 8px; vertical-align: middle;" />
                <RadzenDropDown @bind-Value=@usuarioSeleccionado Data=@usuarios TextProperty="@nameof(UsuarioResponse.UsuarioNombre)" ValueProperty="@nameof(UsuarioResponse.UsuarioID)" Style="width: 100%;" Name="DropDownTextValueProperties" />
            </RadzenStack>
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>

<RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenStack>
            <RadzenFieldset Text="Montos">
                <RadzenStack Gap="1rem">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="3">
                            <RadzenLabel Text="Total efectivo" Component="Name" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="5">
                            <RadzenTextBox Style="width: 100%;color: black;font-weight: bold;" Name="Name" Disabled="true" Value=@totalEfectivoFormateado />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenButton Shade="Shade.Dark" Icon="add_location" Text="Cierre" ButtonStyle="ButtonStyle.Success" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenTabs SelectedIndex="0">
                        <Tabs>
                            <RadzenTabsItem Text="@($"Total billetes: $ {totalBilletes}")">
                                <RadzenStack>
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="4">
                                            <RadzenLabel Text="$500" Component="City" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenNumeric TValue="int" Style="width: 100%;" Min="0" @bind-Value=@totalBilletesQuinientos Change="@OnChange" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Ingrese cantidad de billetes de $500" }})" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="4">
                                            <RadzenLabel Text="$200" Component="City" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenNumeric TValue="int" Style="width: 100%;" Min="0" @bind-Value=@totalBilletesDoscientos Change="@OnChange" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Ingrese cantidad de billetes de $200" }})" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="4">
                                            <RadzenLabel Text="$100" Component="City" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenNumeric TValue="int" Style="width: 100%;" Min="0" @bind-Value=@totalBilletesCien Change="@OnChange" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Ingrese cantidad de billetes de $100" }})" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="4">
                                            <RadzenLabel Text="$50" Component="City" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenNumeric TValue="int" Style="width: 100%;" Min="0" @bind-Value=@totalBilletesCincuenta Change="@OnChange" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Ingrese cantidad de billetes de $50" }})" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="4">
                                            <RadzenLabel Text="$20" Component="City" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenNumeric TValue="int" Style="width: 100%;" Min="0" @bind-Value=@totalBilletesVeinte Change="@OnChange" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Ingrese cantidad de billetes de $20" }})" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                </RadzenStack>
                            </RadzenTabsItem>
                            <RadzenTabsItem Text="@($"Total monedas: $ {totalMonedas}")">
                                <RadzenStack>
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="4">
                                            <RadzenLabel Text="$20" Component="City" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenNumeric TValue="int" Style="width: 100%;" Min="0" @bind-Value=@totalMonedasVeinte Change="@OnChange" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Ingrese cantidad de monedas de $20" }})" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="4">
                                            <RadzenLabel Text="$10" Component="City" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenNumeric TValue="int" Style="width: 100%;" Min="0" @bind-Value=@totalMonedasDiez Change="@OnChange" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Ingrese cantidad de monedas de $10" }})" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="4">
                                            <RadzenLabel Text="$5" Component="City" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenNumeric TValue="int" Style="width: 100%;" Min="0" @bind-Value=@totalMonedasCinco Change="@OnChange" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Ingrese cantidad de monedas de $5" }})" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="4">
                                            <RadzenLabel Text="$2" Component="City" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenNumeric TValue="int" Style="width: 100%;" Min="0" @bind-Value=@totalMonedasDos Change="@OnChange" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Ingrese cantidad de monedas de $2" }})" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="4">
                                            <RadzenLabel Text="$1" Component="City" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenNumeric TValue="int" Style="width: 100%;" Min="0" @bind-Value=@totalMonedasPeso Change="@OnChange" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Ingrese cantidad de monedas de $1" }})" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow AlignItems="AlignItems.Center">
                                        <RadzenColumn Size="12" SizeMD="4">
                                            <RadzenLabel Text="$0.50" Component="City" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenNumeric TValue="int" Style="width: 100%;" Min="0" @bind-Value=@totalMonedasCincuentaCent Change="@OnChange" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Ingrese cantidad de monedas de $0.50" }})" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                </RadzenStack>
                            </RadzenTabsItem>
                        </Tabs>
                    </RadzenTabs>
                </RadzenStack>
            </RadzenFieldset>
        </RadzenStack>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenStack>
            <RadzenFieldset Text="Resumen Caja">
                <RadzenStack Gap="1rem">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="2">
                            <RadzenLabel Text="Compras" Component="Region" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenTextBox Style="width: 100%;color: black;font-weight: bold;" Name="Region" Disabled="true" Value="$4,548.62" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="2" Class="rz-text-align-md-end">
                            <RadzenLabel Text="Ventas" Component="System" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenTextBox Style="width: 100%;color: black;font-weight: bold;" Name="System" Disabled="true" Value="$4,548.62" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="2">
                            <RadzenLabel Text="Depositos" Component="Region" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenTextBox Style="width: 100%;color: black;font-weight: bold;" Name="Region" Disabled="true" Value="$4,548.62" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="2" Class="rz-text-align-md-end">
                            <RadzenLabel Text="Pago Tarjeta" Component="System" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenTextBox Style="width: 100%;color: black;font-weight: bold;" Name="System" Disabled="true" Value="$4,548.62" />
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenFieldset>
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>

@if (bitacora == null)
{
    <p><em>Cargando...</em></p>
}
else
{
}

@code {
    private DateTime startDate = DateTime.Now;
    private DateTime endDate = DateTime.Now.AddHours(1);
    private DateTime minEndDate = DateTime.Now;
    private BitacoraResponse[] bitacora;
    private IList<BitacoraResponse>? selectedBitacora;
    private RadzenAlert alert;
    private bool isAlertVisible = false;
    private System.Timers.Timer timer;
    //start:a partir de aquí es el código del sitio en desarrollo
    string cajaSeleccionada = "";
    string usuarioSeleccionado = "";
    IEnumerable<CajaResponse> cajas;
    IEnumerable<UsuarioResponse> usuarios;
    string totalEfectivoFormateado = string.Empty;
    double totalEfectivo = 0;
    int totalBilletes = 0;
    int totalBilletesQuinientos = 0;
    int totalBilletesDoscientos = 0;
    int totalBilletesCien = 0;
    int totalBilletesCincuenta = 0;
    int totalBilletesVeinte = 0;
    double totalMonedas = 0;
    int totalMonedasVeinte = 0;
    int totalMonedasDiez = 0;
    int totalMonedasCinco = 0;
    int totalMonedasDos = 0;
    int totalMonedasPeso = 0;
    int totalMonedasCincuentaCent = 0;
    //end:a partir de aquí es el código del sitio en desarrollo

    protected override async Task OnInitializedAsync()
    {
        //start: codigo de prueba
        cajas = await cajaService.GetCajas();
        usuarios = await usuarioService.GetUsuarios();
        calcularTotalEfectivo();
        //end: codigo de prueba
        bitacora = await bitacoraService.GetBitacoraVentas(startDate.ToString("dd/MM/yyyy"), endDate.ToString("dd/MM/yyyy"));
        selectedBitacora = new List<BitacoraResponse>() {
            bitacora.FirstOrDefault() ?? new BitacoraResponse() { }
        };
    }

    void DateRender(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || args.Date >= DateTime.Today.AddDays(1);
    }

    async void OnCurrentStartDateChanged(DateTime args)
    {
        startDate = args;
        minEndDate = args;

        if (startDate <= endDate)
            GetBitacora(startDate, endDate);
        else
        {
            ShowAlert();
            bitacora = new BitacoraResponse[] { };
        }
    }

    async void OnCurrentEndDateChanged(DateTime args)
    {
        endDate = args;
        if (startDate <= endDate)
            GetBitacora(startDate, endDate);
        //else
        //aqui mostrar msj que no procede la busqueda por la fecha seleccionada
    }

    private async void GetBitacora(DateTime _startDate, DateTime _endDate)
    {
        bitacora = await bitacoraService.GetBitacoraVentas(_startDate.ToString("dd/MM/yyyy"), _endDate.ToString("dd/MM/yyyy"));
        selectedBitacora = new List<BitacoraResponse>() {
            bitacora.FirstOrDefault() ?? new BitacoraResponse() { }
        };
    }

    private void ShowAlert()
    {
        isAlertVisible = true;
        // Initialize and start the timer
        timer = new System.Timers.Timer(3000); // 3000 ms = 3 seconds
        timer.Elapsed += HideAlert;
        timer.AutoReset = false; // Ensures the timer fires only once
        timer.Start();
    }

    private void HideAlert(object source, System.Timers.ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            isAlertVisible = false;
            timer.Dispose(); // Clean up the timer
            StateHasChanged(); // Notify the component to re-render
        });
    }

    // void OnChange(int cantidadEfectivo, string controlEvento)
    // {
    //     calcularTotalEfectivo();
    // }

    void OnChange()
    {
        calcularTotalEfectivo();
    }

    private void calcularTotalEfectivo()
    {
        totalEfectivo = 0;
        totalBilletes = 0;
        totalMonedas = 0;

        if (totalBilletesQuinientos > 0)
            totalBilletes += (totalBilletesQuinientos * 500);
        if (totalBilletesDoscientos > 0)
            totalBilletes += (totalBilletesDoscientos * 200);
        if (totalBilletesCien > 0)
            totalBilletes += (totalBilletesCien * 100);
        if (totalBilletesCincuenta > 0)
            totalBilletes += (totalBilletesCincuenta * 50);
        if (totalBilletesVeinte > 0)
            totalBilletes += (totalBilletesVeinte * 20);

        if (totalMonedasVeinte > 0)
            totalMonedas += (totalMonedasVeinte * 20);
        if (totalMonedasDiez > 0)
            totalMonedas += (totalMonedasDiez * 10);
        if (totalMonedasCinco > 0)
            totalMonedas += (totalMonedasCinco * 5);
        if (totalMonedasDos > 0)
            totalMonedas += (totalMonedasDos * 2);
        if (totalMonedasPeso > 0)
            totalMonedas += (totalMonedasPeso * 1);
        if (totalMonedasCincuentaCent > 0)
            totalMonedas += (totalMonedasCincuentaCent * 0.50);

        totalEfectivo = totalBilletes + totalMonedas;
        CultureInfo formatoMX = new CultureInfo("es-MX");
        totalEfectivoFormateado = totalEfectivo.ToString("C", formatoMX);
    }
}



